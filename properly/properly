#!/bin/sh

echo THIS SCRIPT IS A MESS AND NEEDS CLEANUP AND IS ONLY HERE IN HOPE THAT IT WILL BE FIXED. DO NOT USE THIS!!!

### CONFIG #####################################################################
# this should be moved to something like /usr/local/etc/properly.conf

snapshot_subvol="zroot/ROOT"
#etcundergit_dirs="/etc /usr/local/etc"
etcundergit_dirs="/home/kamila/u/projects/chaOS /home/kamila/u/projects/songbook/web /home/kamila/u/projects/utils/properly"

### READ CONFIG -- DEAD NOW ####################################################

#CONFIG='/usr/local/etc/defaults/properly.conf'
## pull in config
#. $CONFIG
#for f in $local_config_files; do
#	. $f
#done

### ARGUMENTS PARSING ##########################################################

usage() {
	echo "Usage: $0 [-t title] [-s slug] command [arguments...]"
	exit 47
}

parse_args() {
	while getopts "s:t:" opt; do
		case ${opt} in
			t)
				title=${OPTARG}
				;;
			s)
				slug=${OPTARG}
				;;
		esac
	done
	shift $(( ${OPTIND} - 1 )) # TODO: odprasit
	command="$@"
	[ -z "$command" ] && usage
	[ -z "$title" ] && title="$(to_title $command)"
	[ -z "$slug" ] && slug="$(to_slug $title)"
}

to_title() {
	date "+$* %Y/%m/%d"
}

to_slug() {
	echo $@ | tr ' /\t' '---'
}

### HELPER FUNCTIONS ###########################################################

STDOUT_PREFIX=' * '
STDOUT_COMPLAIN_PREFIX='!!!'

complain() {
	echo "${STDOUT_COMPLAIN_PREFIX} $@"
	read -p "${STDOUT_COMPLAIN_PREFIX}     Type \"yes\" to continue (on your own responsibility): " REPLY
	if [ x"$REPLY" != x'yes' ]; then
		msg 'Aborted.'
		exit 47
	fi
}

msg() {
	echo "${STDOUT_PREFIX}$@"
}

ask() {
	read -p "${STDOUT_PREFIX}$@ [Y/n] " REPLY
	[ x"$REPLY" = x -o x"$REPLY" = x"Y" -o x"$REPLY" = x"y" ]
}

execute() {
	$command || msg "(exit status: $?)"
}

# TODO remove
sgit() {
	echo "[sgit] $@"
}


### CHECKS AND ACTIONS #########################################################

dirty_config_dirs() {
	dirty=""
	for dir in $etcundergit_dirs; do
		( cd $dir && git status ) | grep -q "working directory clean" \
			|| dirty="$dirty $dir"
	done
	echo $dirty
}

check_config_clean() {
	dirty_dirs="$(dirty_config_dirs)"
	for d in $dirty_dirs; do
		msg "$d is dirty"
	done
	[ -z "$dirty_dirs" ]
}

commit_config() {
	title="$1"
	slug="$2"
	for d in $(dirty_config_dirs); do
		(
			cd $d
			sgit add --all .
			# empty commit just prints a message
			sgit commit -m "$title [autocommit]" && sgit tag "$slug"
		)
	done
}

do_snapshot() {
	snapshot="${snapshot_subvol}@${1}"
	msg "creating snapshot: $snapshot"
	zfs snapshot -r "$snapshot"
}

log() {
	msg "[log] $(date +%Y-%m-%d) $1: \`$3\` <$2>"
}

### "PROPERLY" SEQUENCE ########################################################

parse_args $@

# Executing $command properly means:
msg '=== 0) check if config directories (such as /etc) are clean =============='
check_config_clean || complain 'Uncommitted config changes!'
msg '=== 1) snapshot =========================================================='
do_snapshot "pre-$slug" || complain "Cannot create snapshot (exit code $?)!"
msg '=== execute command ======================================================'
execute "$command"
msg '=== n-2) commit config changes ==========================================='
ask 'Autocommit config changes?' && commit_config "$title" "$slug"
msg '=== n-1) snapshot ========================================================'
do_snapshot "post-$slug" || msg "Couldn't create snapshot (exit code $?)!"
msg '=== n) log the change ===================================================='
log "$title" "$slug" "$command"
